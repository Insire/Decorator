using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Decorator {

	/// <summary>The definition for a message, does all of the reflection work once and then you can reuse this.</summary>
	internal class MessageDefinition {

		/// <summary>Initializes a new instance of the <see cref="MessageDefinition"/> class.</summary>
		/// <param name="type">The type.</param>
		/// <param name="props">The properties.</param>
		/// <param name="rep">If the message is repeatable</param>
		/// <autogeneratedoc />
		public MessageDefinition(string type, IEnumerable<MessageProperty> props, bool rep) {
			this.Repeatable = rep;
			this.Type = type;
			this.Properties = props.ToArray();

			uint maxPos = 0;
			foreach (var i in this.Properties)
				if (i.Position >= (maxPos > 0 ? maxPos - 1 : 0))
					maxPos = i.Position + 1;

			this.MaxCount = maxPos;
			this.IntMaxCount = (int)this.MaxCount;
		}

		/// <summary>Gets the type.</summary>
		/// <value>The type.</value>
		/// <autogeneratedoc />
		public string Type { get; }

		/// <summary>Gets the properties.</summary>
		/// <value>The properties.</value>
		/// <autogeneratedoc />
		public MessageProperty[] Properties { get; }

		/// <summary>Gets the maximum count.</summary>
		/// <value>The maximum count.</value>
		/// <autogeneratedoc />
		public uint MaxCount { get; }

		/// <summary>Gets a value indicating whether this <see cref="MessageDefinition" /> is repeatable.</summary>
		/// <value><c>true</c> if repeatable; otherwise, <c>false</c>.</value>
		/// <autogeneratedoc />
		public bool Repeatable { get; }

		internal int IntMaxCount { get; }
	}

	/// <summary>How required a type is</summary>
	internal enum TypeRequiredness {

		/// <summary>It's required</summary>
		Required,

		/// <summary>It's optional</summary>
		Optional
	}

	/// <summary>Demonstrates a property in a message, which values are fetched via reflection</summary>
	internal class MessageProperty {

		/// <summary>Initializes a new instance of the <see cref="MessageProperty"/> class.</summary>
		/// <param name="pos">The position.</param>
		/// <param name="req">If it's required.</param>
		/// <param name="propType">Type of the property.</param>
		/// <param name="propInf">The property info.</param>
		/// <autogeneratedoc />
		public MessageProperty(uint pos, bool req, PropertyInfo propInf) {
			this.Position = pos;
			this.State = req ? TypeRequiredness.Required : TypeRequiredness.Optional;
			this.PropertyInfo = propInf;

			this.IntPos = (int)this.Position;
		}

		/// <summary>The position of this property in the message</summary>
		/// <value>The position.</value>
		public uint Position { get; }

		/// <summary>If this property is declared as required or optional</summary>
		/// <value>The state.</value>
		public TypeRequiredness State { get; }

		/// <summary>The PropertyInfo of the property.</summary>
		/// <value>The property information.</value>
		/// <remarks>Please use the Get and Set methods of this class instead of calling on PropertyInfo.GetGetMethod or PropertyInfo.GetSetMethod</remarks>
		public PropertyInfo PropertyInfo { get; }

		internal int IntPos { get; }

		private Action<object, object> _propSetRaw;
		private ILFunc _propGetRaw;

		private Action<object, object> _propSet {
			get {
				if (this._propSetRaw == default)
					this._propSetRaw = this.PropertyInfo
										.GetSetMethodByExpression();

				return this._propSetRaw;
			}
		}

		private ILFunc _propGet {
			get {
				if (this._propGetRaw == default)
					this._propGetRaw = this.PropertyInfo
										.GetGetMethod()
										.ILWrap();

				return this._propGetRaw;
			}
		}

		/// <summary>Retrieves the property's value via the GetGetMethod</summary>
		/// <param name="instance">The instance to fetch it from</param>
		/// <returns></returns>
		public object Get(object instance)
			=> this._propGet(instance, default);

		/// <summary>Sets the property's value via the GetSetMethod</summary>
		/// <param name="instance">The instance to use</param>
		/// <param name="value">The new value to set it to</param>
		public void Set(object instance, object value)
			=> this._propSet(instance, value);
	}
}