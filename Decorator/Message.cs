using System;
using System.Collections.Generic;

namespace Decorator {

	/// <summary>An abstract class that has the minimim required for you to classify a custom class as a message.</summary>
	public abstract class BaseMessage {

		/// <summary>Gets the type.</summary>
		/// <value>The type.</value>
		/// <autogeneratedoc />
		public abstract string Type { get; }

		/// <summary>Gets the arguments.</summary>
		/// <value>The arguments.</value>
		/// <autogeneratedoc />
		public abstract object[] Arguments { get; }

		/// <summary>Gets the count.</summary>
		/// <value>The count.</value>
		/// <autogeneratedoc />
		public uint Count => (uint)this.Arguments.Length;

		/// <summary>Gets the <see cref="System.Object"/> at the specified index of <see cref="BaseMessage.Arguments"/>.</summary>
		/// <value>The <see cref="System.Object"/>.</value>
		/// <param name="index">The index.</param>
		/// <returns></returns>
		/// <autogeneratedoc />
		public object this[uint index] => this.Arguments[index];

		/// <summary>Determines whether the specified <see cref="System.Object" />, is equal to this instance.</summary>
		/// <param name="obj">The <see cref="System.Object" /> to compare with this instance.</param>
		/// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
		/// <autogeneratedoc />
		public override bool Equals(object obj) {
			if (ReferenceEquals(this, obj)) return true;

			if (obj == null) return false;

			if (obj is BaseMessage bm &&
				this.Type == bm.Type) {

				if (this.Arguments == bm.Arguments) return true;

				if ((this.Arguments == null && bm.Arguments != null) ||
					(this.Arguments != null && bm.Arguments == null)) return false;

				if (bm.Arguments.Length != this.Arguments.Length) return false;

				return ValueEquals(this.Arguments, bm.Arguments);
			}

			return false;
		}
		
		private static bool ValueEquals(object[] a, object[] b) {
			for (var i = 0; i < a.Length; i++)
				if (!a[i].Equals(b[i]))
					return false;
			return true;
		}

		/// <summary>Returns a hash code for this instance.</summary>
		/// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
		/// <autogeneratedoc />
		public override int GetHashCode() {
			var hashCode = 1627454568;
			hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(this.Type);
			hashCode = hashCode * -1521134295 + EqualityComparer<object[]>.Default.GetHashCode(this.Arguments);
			hashCode = hashCode * -1521134295 + this.Count.GetHashCode();
			return hashCode;
		}
	}

	/// <summary>An implementation of BaseMessage that meets the minimum bar.</summary>
	/// <seealso cref="Decorator.BaseMessage" />
	public class BasicMessage : BaseMessage {

		public BasicMessage(string type, params object[] args) {
			this.Type = type;
			this.Arguments = args;
		}

		public override string Type { get; }
		public override object[] Arguments { get; }
	}
}